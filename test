'''
File: tests.py
Description: This file is the test program of Assignment Part 2:Implementation, using unittest to test, to achieve 100% coverage of the code test.
Author: Enda Yu
StudentID: 1103942071
EmailID: Yuyey004
This is my own work as defined by the University's Academic Misconduct Policy.
'''
import unittest
from main import *

class TestPoint(unittest.TestCase):

    def test_herb(self):
        avantoe = Herb("Avantoe", 3.0)
        self.assertEqual(avantoe.getName(),"Avantoe")
        self.assertEqual(avantoe.getPotency(),3)
        avantoe.setPotency(100)
        self.assertEqual(avantoe.getPotency(),100)
        avantoe.setPotency(3)

        self.assertEqual(avantoe.getGrimy(), True)
        self.assertEqual(avantoe.refine(),"Refined success! The potency is 7.5 now.")
        self.assertEqual(avantoe.getPotency(),7.5)
        self.assertEqual(avantoe.getGrimy(),False)
        avantoe.setGrimy(True)
        self.assertEqual(avantoe.getGrimy(),True)

    def test_catalyst(self):
        newt = Catalyst("Eye of Newt", 4.3, 1.0)
        self.assertEqual(newt.getQuality(),1.0)
        self.assertEqual(newt.refine(),"Refined success! The quality is 2.1 now.")
        newt.refine() # 3.2
        newt.refine() # 4.3
        newt.refine() # 5.4
        newt.refine() # 6.5
        newt.refine() # 7.6
        newt.refine() # 8.7
        newt.refine() # 9.8
        self.assertEqual(newt.refine(),"Refined success! The quality is 10 now, it cannot be refined any further")
    
    def test_superPotion(self):
        irit = Herb("Irit", 1.0)
        newt = Catalyst("Eye of Newt", 4.3, 1.0)
        superAttack = SuperPotion("Super Attack", "attack", irit, newt)
        self.assertEqual(superAttack.getName(), "Super Attack")
        self.assertEqual(superAttack.getStat(), "attack")
        self.assertEqual(superAttack.getBoost(), 7.45) # 1+4.3*1*1.5
        self.assertEqual(superAttack.getHerb().getName(), "Irit")
        self.assertEqual(superAttack.getCatalyst().getName(), "Eye of Newt")

    def testExtremePotion(self):
        irit = Herb("Irit", 1.0)
        newt = Catalyst("Eye of Newt", 4.3, 1.0)
        superAttack = SuperPotion("Super Attack", "attack", irit, newt)
        avantoe = Herb("Avantoe", 3.0)
        extremeAttack = ExtremePotion("Extreme Attack", "attack", avantoe, superAttack)
        self.assertEqual(extremeAttack.getBoost(), 67.05) # 3.0*7.45*3
        self.assertEqual(extremeAttack.getReagent().getName(), "Avantoe")
        self.assertEqual(extremeAttack.getPotion().getName(), "Super Attack")

    def testLaboratory(self):
        lab = Laboratory([],[],[])
        self.assertEqual(lab.getPotionNum("Super Attack"), 0)
        # Add reagents
        irit = Herb("Irit", 1.0)
        newt = Catalyst("Eye of Newt", 4.3, 1.0)
        with self.assertRaises(ValueError, msg="Mix failed: Ingredients are not enough!"):
            lab.mixPotion("Super Attack", "SuperPotion", "attack", "Irit", "Eye of Newt")
        lab.addReagent(irit, 1)
        lab.addReagent(newt, 1)
        self.assertEqual(lab.getPotionNum("Super Attack"), 0)
        self.assertEqual(lab.getHerbNum("Irit"), 1)
        self.assertEqual(lab.getCatalystNum("Eye of Newt"), 1)
        lab.mixPotion("Super Attack", "SuperPotion", "attack", "Irit", "Eye of Newt")
        self.assertEqual(lab.getPotionNum("Super Attack"), 1)
        self.assertEqual(lab.getHerbNum("Irit"), 0)
        self.assertEqual(lab.getCatalystNum("Eye of Newt"), 0)
    
    def testAlchemist(self):
        irit = Herb("Irit", 1.0)
        newt = Catalyst("Eye of Newt", 4.3, 1.0)
        lab = Laboratory([],[],[])
        with self.assertRaises(TypeError, msg="All the attributes should be integers from 0 to 100."):
            Alchemist(32, -22, 33, 23, 32, 33, lab)
        with self.assertRaises(TypeError, msg="All the attributes should be integers from 0 to 100."):
            Alchemist(3000, 2, 33, 23, 32, 33, lab)

        Harry = Alchemist(20, 30, 40, 50, 22, 23, lab) # Yes, he is Harry Potter.
        with self.assertRaises(ValueError, msg="Mix failed: Ingredients are not enough!"):
            Harry.mixPotion("Super Attack")
        Harry.collectReagent(irit, 10)
        Harry.collectReagent(newt, 10)
        Harry.mixPotion("Super Attack")

        potion = Harry.getPotion("Super Attack")
        Harry.drinkPotion(potion) # Update values.
        self.assertEqual(Harry.getAttack(), 27.45)

        Harry.refineReagents()
        Harry.mixPotion("Super Attack")
        potion = Harry.getPotion("Super Attack")
        self.assertEqual(Harry.drinkPotion(potion), "attack increased 16.04") # Update values.
        self.assertEqual(Harry.getAttack(), 43.49)


if __name__ == '__main__':
    unittest.main()

